import numpy as np
from astropy.modeling import models, fitting


def find_minimum(x, y):
    ''' Fitter function using which FWHM (y var) is plotted versus focus step (x var).

    Parameters
    ----------
    x : `list` [`float`]
        List of focus steps, in mm or "step units"
    y : `list` [`float`]
        List of FWHM values, units TBD.

    Returns
    -------
    None
    '''
    coefficients = fit_parabola(x, y)
    vertex = find_vertex(coefficients)
    return vertex


def fit_parabola(x, y):
    '''This finds the coefficients of the fit parabola.

    Step-by-step description:
    Step 1: looking for parabola
    Step 2: get linear least square fitting
    Step 3: execute
    Step 4: store coefficients in an array.

    Parameters
    ----------
    x : `list` [`float`]
        List of focus steps, in mm or "step units"
    y : `list` [`float`]
        List of FWHM values, units TBD.

    Returns
    -------
    coefficients : `numpy.ndarray` [`float`]
        Numpy array of coefficients a, b, c (all [`float`]) produced from parabola fit.
    '''

    t_init = models.Polynomial1D(2)
    fitter = fitting.LinearLSQFitter()
    t_fit = fitter(t_init, x, y)
    a = t_fit.c2.value
    b = t_fit.c1.value
    c = t_fit.c0.value
    coefficients = np.array([a, b, c])

    return coefficients


def find_vertex(coefficients):
    '''Finds the vertex.

    The vertex's x value coincides with the optimal focus length.

    Parameters
    ----------
    coefficients : `numpy.ndarray` [`float`]
        Numpy array of coefficients a, b, c (all [`float`]) generated by fit_parabola

    Returns
    -------
    -b/(2*a) : `float`
        x-coordinate of optimal focus position
    '''
    a = coefficients[0]
    b = coefficients[1]

    return -b/(2*a)
